#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { runCommand } = require('./Utils/helper');

const METADATA_PATH = process.argv[2];
const DEVICE_ID = process.argv[3];

if (!METADATA_PATH) {
  console.error('Usage: ./run-android-tests.js <METADATA_JSON_FILE> [DEVICE_ID]');
  console.error('  METADATA_JSON_FILE: Path to the metadata JSON file generated by build-android-app.js');
  console.error('  DEVICE_ID: ADB device ID (optional)');
  process.exit(1);
}

const ERROR_LOG_FILE = path.join(process.cwd(), 'android-benchmark-errors.log');
fs.writeFileSync(ERROR_LOG_FILE, `=== Android Test Errors Log Started at ${new Date().toISOString()} ===\n\n`, 'utf8');

async function installAndLaunchApp() {
  console.log('\n=== Installing and Launching App ===\n');
  
  try {
    console.log('Reading metadata file...');
    const metadata = JSON.parse(fs.readFileSync(METADATA_PATH, 'utf8'));
    
    const packageName = metadata.packageName;
    const version = metadata.version;
    const apkPath = metadata.apkPath;
    const architecture = metadata.architecture;
    
    console.log(`Package name: ${packageName}`);
    console.log(`Version: ${version}`);
    console.log(`Architecture: ${architecture}`);
    
    if (!fs.existsSync(apkPath)) {
      const errorMsg = `APK not found at ${apkPath}`;
      fs.appendFileSync(ERROR_LOG_FILE, `[${new Date().toISOString()}] ERROR: ${errorMsg}\n\n`, 'utf8');
      console.error(errorMsg);
      process.exit(1);
    }
    
    console.log(`\n=== Installing APK: ${apkPath} ===\n`);
    const deviceOption = DEVICE_ID ? `-s ${DEVICE_ID}` : '';
    runCommand(`adb ${deviceOption} install -r ${apkPath}`, ERROR_LOG_FILE);
    
    console.log(`\n=== Launching app: ${packageName} ===\n`);
    runCommand(`adb ${deviceOption} shell am force-stop ${packageName}`,ERROR_LOG_FILE, { ignoreErrors: true });
    
  } catch (error) {
    console.error('Installation failed:', error.message);
    fs.appendFileSync(ERROR_LOG_FILE, `[${new Date().toISOString()}] ERROR: Installation failed\n${error.message}\n\n`, 'utf8');
    process.exit(1);
  }
}

installAndLaunchApp();