#!/usr/bin/env node

import fs from 'fs';
import { runCommand } from '../../utils/helper.js';

const METADATA_PATH = process.argv[2];
const simulatorId = process.argv[3];

if (!METADATA_PATH) {
  console.error('Usage: ./run-ios-tests.js <METADATA_JSON_FILE> [SIMULATOR_ID]');
  console.error('  METADATA_JSON_FILE: Path to the metadata JSON file generated by build-ios-app.js');
  console.error('  SIMULATOR_ID: iOS simulator UDID (optional)');
  process.exit(1);
}

function installApp(simulatorId, appPath) {
  console.log(`\n=== Installing App on Simulator ${simulatorId} ===`);

  runCommand(`xcrun simctl install ${simulatorId} "${appPath}"`);
  console.log('App installation command completed');

  return true;
}

function launchApp(simulatorId, bundleId) {
  console.log(`\n=== Launching App ${bundleId} on Simulator ${simulatorId} ===`);

  runCommand(`xcrun simctl launch ${simulatorId} ${bundleId}`);
  console.log('App launched successfully');

  return true;
}

function installAndLaunchApp() {
  console.log('\n=== Installing and Launching iOS App ===\n');

  console.log('Reading metadata file...');
  const metadata = JSON.parse(fs.readFileSync(METADATA_PATH, 'utf8'));

  const bundleId = metadata.bundleId;
  const version = metadata.version;
  const appPath = metadata.appPath;
  const architecture = metadata.architecture;
  const preferredSimulatorId = metadata.simulatorId;

  console.log(`Bundle ID: ${bundleId}`);
  console.log(`Version: ${version}`);
  console.log(`Architecture: ${architecture}`);
  console.log(`App path: ${appPath}`);

  if (preferredSimulatorId) {
    console.log(`Preferred simulator ID: ${preferredSimulatorId}`);
  }

  if (!fs.existsSync(appPath)) {
    throw new Error(`App not found at ${appPath}`);
  }


  console.log(`Using simulator: ${simulatorId}`);

  installApp(simulatorId, appPath);


  launchApp(simulatorId, bundleId);

  metadata.simulatorId = simulatorId;
  fs.writeFileSync(METADATA_PATH, JSON.stringify(metadata, null, 2));

  console.log('\n=== App Installation and Launch Completed ===\n');

  return { bundleId, version, architecture, simulatorId };
}

installAndLaunchApp(); 