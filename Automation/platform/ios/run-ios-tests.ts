#!/usr/bin/env node

import fs from 'fs';
import { BuildMetadata } from '../../utils/types';
import { installApp } from './helper';
import { Logger } from '../../utils/logger';

const METADATA_PATH = process.argv[2];
const simulatorId = process.argv[3];

if (!METADATA_PATH) {
  console.error('Usage: ./run-ios-tests.js <METADATA_JSON_FILE> [SIMULATOR_ID]');
  console.error('  METADATA_JSON_FILE: Path to the metadata JSON file generated by build-ios-app.js');
  console.error('  SIMULATOR_ID: iOS simulator UDID (optional)');
  process.exit(1);
}

interface InstallResult {
  bundleId: string;
  version: string;
  architecture: 'old' | 'new';
  simulatorId: string;
}

function installIOSApp(): InstallResult {
  const logger = new Logger();
  logger.info('\n=== Installing and Launching iOS App ===\n');

  logger.info('Reading metadata file...');
  const metadata = JSON.parse(fs.readFileSync(METADATA_PATH, 'utf8')) as BuildMetadata;

  const bundleId = metadata.bundleId;
  const version = metadata.version;
  const appPath = metadata.appPath;
  const architecture = metadata.arch;

  logger.info(`Bundle ID: ${bundleId}`);
  logger.info(`Version: ${version}`);
  logger.info(`Architecture: ${architecture}`);
  logger.info(`App path: ${appPath}`);

  if (!fs.existsSync(appPath)) {
    throw new Error(`App not found at ${appPath}`);
  }

  if (!simulatorId) {
    throw new Error('No simulator ID provided');
  }

  console.log(`Using simulator: ${simulatorId}`);

  installApp(simulatorId, appPath);

  fs.writeFileSync(METADATA_PATH, JSON.stringify(metadata, null, 2));

  console.log('\n=== App Installation Completed ===\n');

  return { bundleId, version, architecture, simulatorId };
}

installIOSApp(); 